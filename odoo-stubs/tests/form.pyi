import collections
from typing import Any, Generic, Iterator, TypeVar

from ..models import BaseModel

_ModelT = TypeVar("_ModelT", bound=BaseModel)
_FormT = TypeVar("_FormT", bound=Form)

class Form(Generic[_ModelT]):
    def __init__(self, record: _ModelT, view: Any | None = ...) -> None: ...
    def __getattr__(self, field_name: str): ...
    def __setattr__(self, field_name: str, value) -> None: ...
    def __enter__(self: _FormT) -> _FormT: ...
    def __exit__(self, exc_type, exc_value, traceback) -> None: ...
    def save(self) -> _ModelT: ...
    @property
    def record(self) -> _ModelT: ...

class O2MForm(Form):
    def __init__(self, proxy: O2MProxy, index: int | None = ...) -> None: ...
    def save(self) -> None: ...

class UpdateDict(dict):
    def __init__(self, *args, **kwargs) -> None: ...
    def changed_items(self) -> Iterator[tuple]: ...
    def update(self, *args, **kw) -> None: ...

class X2MProxy:
    def __init__(self, form: Form, field_name: str) -> None: ...

class O2MProxy(X2MProxy):
    def __init__(self, form: Form, field_name: str) -> None: ...
    def __len__(self) -> int: ...
    def new(self) -> O2MForm: ...
    def edit(self, index: int) -> O2MForm: ...
    def remove(self, index: int) -> None: ...

class M2MProxy(X2MProxy, collections.abc.Sequence):
    def __getitem__(self, index: int) -> BaseModel: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[BaseModel]: ...
    def __contains__(self, record: BaseModel) -> bool: ...
    def add(self, record: BaseModel) -> None: ...
    def remove(self, id: int | None = ..., index: int | None = ...) -> None: ...
    def clear(self) -> None: ...

def read_record(record: BaseModel, fields: dict) -> dict: ...

class Dotter:
    def __init__(self, values) -> None: ...
    def __getattr__(self, key): ...
