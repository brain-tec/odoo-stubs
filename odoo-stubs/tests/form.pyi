import collections
from typing import Any, Callable, Generic, Iterator, TypeVar

from lxml.etree import _Element

from ..api import Environment
from ..models import BaseModel

_ModelT = TypeVar("_ModelT", bound=BaseModel)
_FormT = TypeVar("_FormT", bound=Form)

class Form(Generic[_ModelT]):
    _record: _ModelT
    _env: Environment
    _models_info: dict
    _view: Any
    _values: dict
    _changed: set
    def __init__(self, record: _ModelT, view: Any | None = ...) -> None: ...
    def _process_view(
        self, tree: _Element, model: BaseModel, level: int = ...
    ) -> dict: ...
    def _get_one2many_edition_view(
        self, field_info: dict, node: _Element, level: int
    ) -> dict: ...
    def __str__(self) -> str: ...
    def _init_from_defaults(self) -> None: ...
    def __getattr__(self, field_name: str): ...
    def __setattr__(self, field_name: str, value) -> None: ...
    def _get_modifier(
        self,
        field_name: str,
        modifier: str,
        *,
        view: Any | None = ...,
        vals: dict | None = ...
    ): ...
    _OPS: dict[str, Callable]
    def _get_context(self, field_name: str): ...
    def _get_eval_context(self) -> dict: ...
    def __enter__(self: _FormT) -> _FormT: ...
    def __exit__(self, exc_type, exc_value, traceback) -> None: ...
    def save(self) -> _ModelT: ...
    @property
    def record(self) -> _ModelT: ...
    def _values_to_save(self, all_fields: bool = ...) -> dict: ...
    def _values_to_save_(
        self,
        values: dict,
        fields: dict,
        view: dict,
        changed: set,
        all_fields: bool = ...,
        modifiers_values: dict | None = ...,
        parent_link: str | None = ...,
    ) -> dict: ...
    def _perform_onchange(self, field_name: str | None = ...) -> dict: ...
    def _onchange_values(self) -> dict: ...
    def _onchange_values_(self, fields: dict, values: dict) -> dict: ...
    def _cleanup_onchange(self, field_info: dict, value, current): ...

class O2MForm(Form):
    _proxy: O2MProxy
    _index: int | None
    def __init__(self, proxy: O2MProxy, index: int | None = ...) -> None: ...
    def _get_modifier(
        self,
        field_name: str,
        modifier: str,
        *,
        view: Any | None = ...,
        vals: dict | None = ...
    ): ...
    def _get_eval_context(self) -> dict: ...
    def _onchange_values(self) -> dict: ...
    def save(self) -> None: ...
    def _values_to_save(self, all_fields: bool = ...) -> dict: ...

class UpdateDict(dict):
    _changed: set
    def __init__(self, *args, **kwargs) -> None: ...
    def changed_items(self) -> Iterator[tuple]: ...
    def update(self, *args, **kw) -> None: ...

class X2MProxy:
    _form: Form
    _field: str
    _field_info: dict
    def __init__(self, form: Form, field_name: str) -> None: ...
    def _assert_editable(self) -> None: ...

class O2MProxy(X2MProxy):
    _records: list
    def __init__(self, form: Form, field_name: str) -> None: ...
    def __len__(self) -> int: ...
    @property
    def _model(self) -> BaseModel: ...
    def new(self) -> O2MForm: ...
    def edit(self, index: int) -> O2MForm: ...
    def remove(self, index: int) -> None: ...
    def _command_index(self, for_record: int) -> int: ...

class M2MProxy(X2MProxy, collections.abc.Sequence):
    def __getitem__(self, index: int) -> BaseModel: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[BaseModel]: ...
    def __contains__(self, record: BaseModel) -> bool: ...
    def _get_ids(self) -> list: ...
    def add(self, record: BaseModel) -> None: ...
    def remove(self, id: int | None = ..., index: int | None = ...) -> None: ...
    def clear(self) -> None: ...

def read_record(record: BaseModel, fields: dict) -> dict: ...
def _cleanup_from_default(type_: str, value): ...

class Dotter:
    __values: Any
    def __init__(self, values) -> None: ...
    def __getattr__(self, key): ...
