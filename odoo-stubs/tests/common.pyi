import collections
import unittest
from typing import Any, Optional

from ..api import Environment
from ..modules.registry import Registry
from ..sql_db import Cursor

ADDONS_PATH: Any
HOST: str
PORT: Any
ADMIN_USER_ID: Any

def get_db_name(): ...

DB: Any

def at_install(flag): ...
def post_install(flag): ...
def new_test_user(
    env, login: str = ..., groups: str = ..., context: Optional[Any] = ..., **kwargs
): ...

class TreeCase(unittest.TestCase):
    def __init__(self, methodName: str = ...) -> None: ...
    def assertTreesEqual(self, n1, n2, msg: Optional[Any] = ...) -> None: ...

class MetaCase(type):
    def __init__(cls, name, bases, attrs) -> None: ...

class BaseCase(TreeCase):
    longMessage: bool
    warm: bool
    registry: Registry
    cr: Cursor
    env: Environment
    def cursor(self): ...
    @property
    def uid(self): ...
    @uid.setter
    def uid(self, user) -> None: ...
    def ref(self, xid): ...
    def browse_ref(self, xid): ...
    def assertRaises(self, exception, func: Optional[Any] = ..., *args, **kwargs): ...
    def assertQueryCount(self, default: int = ..., **counters): ...
    def assertRecordValues(self, records, expected_values): ...
    def shortDescription(self): ...
    def assertItemsEqual(self, a, b, msg: Optional[Any] = ...) -> None: ...

class TransactionCase(BaseCase):
    def setUp(self): ...
    def patch(self, obj, key, val) -> None: ...
    def patch_order(self, model, order) -> None: ...

class SingleTransactionCase(BaseCase):
    @classmethod
    def setUpClass(cls) -> None: ...
    @classmethod
    def tearDownClass(cls) -> None: ...

savepoint_seq: Any

class SavepointCase(SingleTransactionCase):
    def setUp(self) -> None: ...
    def tearDown(self) -> None: ...

class ChromeBrowser:
    devtools_port: Any
    ws_url: str
    ws: Any
    request_id: int
    user_data_dir: Any
    chrome_pid: Any
    screencast_frames: Any
    sigxcpu_handler: Any
    def __init__(self, logger) -> None: ...
    def signal_handler(self, sig, frame) -> None: ...
    def stop(self) -> None: ...
    @property
    def executable(self): ...
    def take_screenshot(self, prefix: str = ...) -> None: ...
    def start_screencast(self) -> None: ...
    def set_cookie(self, name, value, path, domain): ...
    def delete_cookie(self, name, **kwargs): ...
    def navigate_to(self, url, wait_stop: bool = ...) -> None: ...
    def clear(self) -> None: ...

class HttpCase(TransactionCase):
    registry_test_mode: bool
    browser: Any
    xmlrpc_url: Any
    xmlrpc_common: Any
    xmlrpc_db: Any
    xmlrpc_object: Any
    def __init__(self, methodName: str = ...) -> None: ...
    @classmethod
    def start_browser(cls, logger) -> None: ...
    @classmethod
    def tearDownClass(cls) -> None: ...
    session: Any
    session_id: Any
    opener: Any
    def setUp(self) -> None: ...
    def url_open(self, url, data: Optional[Any] = ..., timeout: int = ...): ...
    def authenticate(self, user, password) -> None: ...
    def browser_js(
        self,
        url_path,
        code,
        ready: str = ...,
        login: Optional[Any] = ...,
        timeout: int = ...,
        **kw
    ) -> None: ...
    phantom_js: Any

def users(*logins): ...
def warmup(func, *args, **kwargs) -> None: ...
def can_import(module): ...

ref_re: Any

class Form:
    def __init__(self, recordp, view: Optional[Any] = ...) -> None: ...
    def __getattr__(self, field): ...
    def __setattr__(self, field, value) -> None: ...
    def __enter__(self) -> Form: ...
    def __exit__(self, etype, _evalue, _etb) -> None: ...
    def save(self): ...

class O2MForm(Form):
    def __init__(self, proxy, index: Optional[Any] = ...) -> None: ...
    def save(self) -> None: ...

class UpdateDict(dict):
    def __init__(self, *args, **kwargs) -> None: ...
    def changed_items(self): ...
    def update(self, *args, **kw) -> None: ...

class X2MProxy: ...

class O2MProxy(X2MProxy):
    def __init__(self, parent, field) -> None: ...
    def __len__(self): ...
    def new(self): ...
    def edit(self, index): ...
    def remove(self, index) -> None: ...

class M2MProxy(X2MProxy, collections.Sequence):
    def __init__(self, parent, field) -> None: ...
    def __getitem__(self, it): ...
    def __len__(self): ...
    def __iter__(self) -> Any: ...
    def __contains__(self, record): ...
    def add(self, record) -> None: ...
    def remove(self, id: Optional[Any] = ..., index: Optional[Any] = ...) -> None: ...
    def clear(self) -> None: ...

def record_to_values(fields, record): ...
def tagged(*tags): ...

class TagsSelector:
    filter_spec_re: Any
    exclude: Any
    include: Any
    def __init__(self, spec) -> None: ...
    def check(self, test): ...
