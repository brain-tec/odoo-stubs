import collections
import unittest
from typing import Any, Optional

from ..api import Environment
from ..modules.registry import Registry
from ..sql_db import Cursor

_logger: Any
ADDONS_PATH: Any
HOST: str
PORT: Any
ADMIN_USER_ID: Any

def get_db_name(): ...

DB: Any

def at_install(flag): ...
def post_install(flag): ...
def new_test_user(env, login: str = ..., groups: str = ..., context: Optional[Any] = ..., **kwargs): ...

class TreeCase(unittest.TestCase):
    def __init__(self, methodName: str = ...) -> None: ...
    def assertTreesEqual(self, n1, n2, msg: Optional[Any] = ...) -> None: ...

class MetaCase(type):
    def __init__(cls, name, bases, attrs) -> None: ...

class BaseCase(TreeCase):
    longMessage: bool
    warm: bool
    registry: Registry
    cr: Cursor
    env: Environment
    def cursor(self): ...
    @property
    def uid(self): ...
    @uid.setter
    def uid(self, user) -> None: ...
    def ref(self, xid): ...
    def browse_ref(self, xid): ...
    def _assertRaises(self, exception) -> None: ...
    def assertRaises(self, exception, func: Optional[Any] = ..., *args, **kwargs): ...
    def assertQueryCount(self, default: int = ..., **counters): ...
    def assertRecordValues(self, records, expected_values): ...
    def shortDescription(self): ...
    def assertItemsEqual(self, a, b, msg: Optional[Any] = ...) -> None: ...

class TransactionCase(BaseCase):
    def setUp(self): ...
    def patch(self, obj, key, val) -> None: ...
    def patch_order(self, model, order) -> None: ...

class SingleTransactionCase(BaseCase):
    @classmethod
    def setUpClass(cls) -> None: ...
    @classmethod
    def tearDownClass(cls) -> None: ...

savepoint_seq: Any

class SavepointCase(SingleTransactionCase):
    _savepoint_id: Any
    def setUp(self) -> None: ...
    def tearDown(self) -> None: ...

class ChromeBrowser:
    _logger: Any
    devtools_port: Any
    ws_url: str
    ws: Any
    request_id: int
    user_data_dir: Any
    chrome_pid: Any
    screencast_frames: Any
    sigxcpu_handler: Any
    def __init__(self, logger) -> None: ...
    def signal_handler(self, sig, frame) -> None: ...
    def stop(self) -> None: ...
    @property
    def executable(self): ...
    def _spawn_chrome(self, cmd): ...
    def _chrome_start(self) -> None: ...
    def _find_websocket(self) -> None: ...
    def _json_command(self, command, timeout: int = ...): ...
    def _open_websocket(self) -> None: ...
    def _websocket_send(self, method, params: Optional[Any] = ...): ...
    def _websocket_wait_id(self, awaited_id, timeout: int = ...): ...
    def _websocket_wait_event(self, method, params: Optional[Any] = ..., timeout: int = ...): ...
    def _get_shotname(self, prefix, ext): ...
    def take_screenshot(self, prefix: str = ...) -> None: ...
    def _save_screencast(self, prefix: str = ...) -> None: ...
    def start_screencast(self) -> None: ...
    def set_cookie(self, name, value, path, domain): ...
    def delete_cookie(self, name, **kwargs): ...
    def _wait_ready(self, ready_code, timeout: int = ...): ...
    def _wait_code_ok(self, code, timeout): ...
    def navigate_to(self, url, wait_stop: bool = ...) -> None: ...
    def clear(self) -> None: ...

class HttpCase(TransactionCase):
    registry_test_mode: bool
    browser: Any
    xmlrpc_url: Any
    xmlrpc_common: Any
    xmlrpc_db: Any
    xmlrpc_object: Any
    _logger: Any
    def __init__(self, methodName: str = ...) -> None: ...
    @classmethod
    def start_browser(cls, logger) -> None: ...
    @classmethod
    def tearDownClass(cls) -> None: ...
    session: Any
    session_id: Any
    opener: Any
    def setUp(self) -> None: ...
    def url_open(self, url, data: Optional[Any] = ..., timeout: int = ...): ...
    def _wait_remaining_requests(self) -> None: ...
    def authenticate(self, user, password) -> None: ...
    def browser_js(self, url_path, code, ready: str = ..., login: Optional[Any] = ..., timeout: int = ..., **kw) -> None: ...
    phantom_js: Any

def users(*logins): ...
def warmup(func, *args, **kwargs) -> None: ...
def can_import(module): ...

ref_re: Any

class Form:
    def __init__(self, recordp, view: Optional[Any] = ...) -> None: ...
    def _o2m_set_edition_view(self, descr, node, level) -> None: ...
    def __str__(self): ...
    def _process_fvg(self, model, fvg, level: int = ...) -> None: ...
    def _init_from_defaults(self, model): ...
    def _init_from_values(self, values) -> None: ...
    def __getattr__(self, field): ...
    def _get_modifier(self, field, modifier, default: bool = ..., modmap: Optional[Any] = ..., vals: Optional[Any] = ...): ...
    _OPS: Any
    def _get_context(self, field): ...
    def __setattr__(self, field, value) -> None: ...
    def __enter__(self) -> Form: ...
    def __exit__(self, etype, _evalue, _etb) -> None: ...
    def save(self): ...
    def _values_to_save(self, all_fields: bool = ...): ...
    def _perform_onchange(self, fields) -> None: ...
    def _onchange_values(self): ...
    def _cleanup_onchange(self, descr, value, current): ...

class O2MForm(Form):
    def __init__(self, proxy, index: Optional[Any] = ...) -> None: ...
    def _get_modifier(self, field, modifier, default: bool = ..., modmap: Optional[Any] = ..., vals: Optional[Any] = ...): ...
    def _onchange_values(self): ...
    def save(self) -> None: ...
    def _values_to_save(self, all_fields: bool = ...): ...

class UpdateDict(dict):
    _changed: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def changed_items(self): ...
    def update(self, *args, **kw) -> None: ...

class X2MProxy:
    _parent: Any
    _field: Any
    def _assert_editable(self) -> None: ...

class O2MProxy(X2MProxy):
    _parent: Any
    _field: Any
    _records: Any
    def __init__(self, parent, field) -> None: ...
    def __len__(self): ...
    @property
    def _model(self): ...
    @property
    def _descr(self): ...
    def _command_index(self, for_record): ...
    def new(self): ...
    def edit(self, index): ...
    def remove(self, index) -> None: ...

class M2MProxy(X2MProxy, collections.Sequence):
    _parent: Any
    _field: Any
    def __init__(self, parent, field) -> None: ...
    def __getitem__(self, it): ...
    def __len__(self): ...
    def __iter__(self) -> Any: ...
    def __contains__(self, record): ...
    def add(self, record) -> None: ...
    def _get_ids(self): ...
    def remove(self, id: Optional[Any] = ..., index: Optional[Any] = ...) -> None: ...
    def clear(self) -> None: ...

def record_to_values(fields, record): ...
def _cleanup_from_default(type_, value): ...
def _get_node(view, f, *arg): ...
def tagged(*tags): ...

class TagsSelector:
    filter_spec_re: Any
    exclude: Any
    include: Any
    def __init__(self, spec) -> None: ...
    def check(self, test): ...
