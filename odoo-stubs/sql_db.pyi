from typing import Any, Optional

import psycopg2.extensions

types_mapping: Any

def unbuffer(symb, cr): ...
def undecimalize(symb, cr): ...
def adapt_string(adapted): ...

re_from: Any
re_into: Any
sql_counter: int

class Cursor:
    IN_MAX: int
    def check(f): ...
    sql_from_log: Any
    sql_into_log: Any
    sql_log: Any
    sql_log_count: int
    dbname: Any
    cache: Any
    def __init__(self, pool, dbname, dsn, serialized: bool = ...) -> None: ...
    def dictfetchone(self): ...
    def dictfetchmany(self, size): ...
    def dictfetchall(self): ...
    def __del__(self) -> None: ...
    def execute(
        self, query, params: Optional[Any] = ..., log_exceptions: Optional[Any] = ...
    ): ...
    def split_for_in_conditions(self, ids, size: Optional[Any] = ...): ...
    def print_log(self): ...
    def close(self): ...
    def autocommit(self, on) -> None: ...
    def after(self, event, func) -> None: ...
    def commit(self): ...
    def rollback(self): ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, traceback) -> None: ...
    def savepoint(self) -> None: ...
    def __getattr__(self, name): ...
    @property
    def closed(self): ...

class TestCursor(Cursor):
    def __init__(self, *args, **kwargs) -> None: ...
    def acquire(self) -> None: ...
    def release(self) -> None: ...
    def force_close(self) -> None: ...
    def close(self) -> None: ...
    def autocommit(self, on) -> None: ...
    def commit(self) -> None: ...
    def rollback(self) -> None: ...

class LazyCursor:
    def __init__(self, dbname: Optional[Any] = ...) -> None: ...
    @property
    def dbname(self): ...
    def __getattr__(self, name): ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, traceback) -> None: ...

class PsycoConnection(psycopg2.extensions.connection): ...

class ConnectionPool:
    def locked(fun): ...
    def __init__(self, maxconn: int = ...) -> None: ...
    def borrow(self, connection_info): ...
    def give_back(self, connection, keep_in_pool: bool = ...) -> None: ...
    def close_all(self, dsn: Optional[Any] = ...) -> None: ...

class Connection:
    dbname: Any
    dsn: Any
    def __init__(self, pool, dbname, dsn) -> None: ...
    def cursor(self, serialized: bool = ...): ...
    def test_cursor(self, serialized: bool = ...): ...
    serialized_cursor: Any
    def __bool__(self) -> None: ...
    __nonzero__: Any

def connection_info_for(db_or_uri): ...
def db_connect(to, allow_uri: bool = ...): ...
def close_db(db_name) -> None: ...
def close_all() -> None: ...
