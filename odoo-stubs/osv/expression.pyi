from functools import partial as partial
from typing import Any, Callable

from ..models import MAGIC_COLUMNS as MAGIC_COLUMNS
from ..models import BaseModel
from ..sql_db import Cursor
from ..tools.misc import get_lang as get_lang

NOT_OPERATOR: str
OR_OPERATOR: str
AND_OPERATOR: str
DOMAIN_OPERATORS: tuple[str, ...]
TERM_OPERATORS: tuple[str, ...]
NEGATIVE_TERM_OPERATORS: tuple[str, ...]
DOMAIN_OPERATORS_NEGATION: dict[str, str]
TERM_OPERATORS_NEGATION: dict[str, str]
TRUE_LEAF: tuple
FALSE_LEAF: tuple
TRUE_DOMAIN: list[tuple]
FALSE_DOMAIN: list[tuple]

def normalize_domain(domain: list) -> list: ...
def is_false(model, domain: list) -> bool: ...
def combine(operator: str, unit, zero, domains: list[list]) -> list: ...
def AND(domains: list[list]) -> list: ...
def OR(domains: list[list]) -> list: ...
def distribute_not(domain: list) -> list: ...
def generate_table_alias(
    src_table_alias: str, joined_tables: list = ...
) -> tuple[str, str]: ...
def get_alias_from_query(from_query: str) -> tuple[str, str]: ...
def normalize_leaf(element): ...
def is_operator(element) -> bool: ...
def is_leaf(element, internal: bool = ...) -> bool: ...
def select_from_where(
    cr: Cursor,
    select_field: str,
    from_table: str,
    where_field: str,
    where_ids: list[int],
    where_operator: str,
) -> list: ...
def select_distinct_from_where_not_null(
    cr: Cursor, select_field: str, from_table: str
) -> list: ...
def get_unaccent_wrapper(cr: Cursor) -> Callable[[Any], str]: ...

class ExtendedLeaf:
    join_context: list[tuple]
    leaf: Any
    model: BaseModel
    def __init__(
        self,
        leaf,
        model: BaseModel,
        join_context: list[tuple] | None = ...,
        internal: bool = ...,
    ) -> None: ...
    def generate_alias(self) -> str: ...
    def add_join_context(self, model, lhs_col, table_col, link) -> None: ...
    def get_join_conditions(self) -> list[str]: ...
    def get_tables(self) -> set[str]: ...
    def check_leaf(self, internal: bool = ...) -> None: ...
    def is_operator(self) -> bool: ...
    def is_true_leaf(self) -> bool: ...
    def is_false_leaf(self) -> bool: ...
    def is_leaf(self, internal: bool = ...): ...
    def normalize_leaf(self) -> bool: ...

def create_substitution_leaf(
    leaf: ExtendedLeaf,
    new_elements,
    new_model: BaseModel | None = ...,
    internal: bool = ...,
) -> ExtendedLeaf: ...

class expression:
    joins: list
    root_model: BaseModel
    expression: list
    result: tuple[str, list]
    def __init__(self, domain: list, model: BaseModel) -> None: ...
    def get_tables(self) -> tuple[str, ...]: ...
    result: list
    stack: list
    def parse(self): ...
    def to_sql(self) -> tuple[str, list]: ...
