from typing import Any

NOT_OPERATOR: str
OR_OPERATOR: str
AND_OPERATOR: str
DOMAIN_OPERATORS: Any
TERM_OPERATORS: Any
NEGATIVE_TERM_OPERATORS: Any
DOMAIN_OPERATORS_NEGATION: Any
TERM_OPERATORS_NEGATION: Any
TRUE_LEAF: Any
FALSE_LEAF: Any
TRUE_DOMAIN: Any
FALSE_DOMAIN: Any
_logger: Any

def normalize_domain(domain): ...
def combine(operator, unit, zero, domains): ...
def AND(domains): ...
def OR(domains): ...
def distribute_not(domain): ...
def _quote(to_quote): ...
def generate_table_alias(src_table_alias, joined_tables=...): ...
def get_alias_from_query(from_query): ...
def normalize_leaf(element): ...
def is_operator(element): ...
def is_leaf(element, internal: bool = ...): ...
def select_from_where(
    cr, select_field, from_table, where_field, where_ids, where_operator
): ...
def select_distinct_from_where_not_null(cr, select_field, from_table): ...
def get_unaccent_wrapper(cr): ...

class ExtendedLeaf:
    join_context: Any
    leaf: Any
    model: Any
    _models: Any
    def __init__(
        self, leaf, model, join_context: Any | None = ..., internal: bool = ...
    ) -> None: ...
    def __str__(self): ...
    def generate_alias(self): ...
    def add_join_context(self, model, lhs_col, table_col, link) -> None: ...
    def get_join_conditions(self): ...
    def get_tables(self): ...
    def _get_context_debug(self): ...
    def check_leaf(self, internal: bool = ...) -> None: ...
    def is_operator(self): ...
    def is_true_leaf(self): ...
    def is_false_leaf(self): ...
    def is_leaf(self, internal: bool = ...): ...
    def normalize_leaf(self): ...

def create_substitution_leaf(
    leaf, new_elements, new_model: Any | None = ..., internal: bool = ...
): ...

class expression:
    _unaccent: Any
    joins: Any
    root_model: Any
    expression: Any
    def __init__(self, domain, model) -> None: ...
    def get_tables(self): ...
    result: Any
    stack: Any
    def parse(self): ...
    def __leaf_to_sql(self, eleaf): ...
    def to_sql(self): ...
