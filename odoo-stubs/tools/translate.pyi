import csv
from typing import Any, Optional

WEB_TRANSLATION_COMMENT: str
SKIPPED_ELEMENTS: Any
ENGLISH_SMALL_WORDS: Any

class UNIX_LINE_TERMINATOR(csv.excel):
    lineterminator: str

def encode(s): ...

TRANSLATED_ELEMENTS: Any
TRANSLATED_ATTRS: Any
avoid_pattern: Any
node_pattern: Any

def translate_xml_node(node, callback, parse, serialize): ...
def parse_xml(text): ...
def serialize_xml(node): ...
def parse_html(text): ...
def serialize_html(node): ...
def xml_translate(callback, value): ...
def html_translate(callback, value): ...
def translate(cr, name, source_type, lang, source: Optional[Any] = ...): ...

class GettextAlias:
    def __call__(self, source): ...

_: Any

def quote(s): ...

re_escaped_char: Any
re_escaped_replacements: Any

def unquote(str): ...

class PoFile:
    buffer: Any
    def __init__(self, buffer) -> None: ...
    lines: Any
    lines_count: Any
    first: bool
    extra_lines: Any
    def __iter__(self) -> Any: ...
    def cur_line(self): ...
    def next(self): ...
    __next__: Any
    def write_infos(self, modules) -> None: ...
    def write(
        self, modules, tnrs, source, trad, comments: Optional[Any] = ...
    ) -> None: ...

def trans_export(lang, modules, buffer, format, cr) -> None: ...
def trans_parse_rml(de): ...
def in_modules(object_name, modules): ...
def babel_extract_qweb(fileobj, keywords, comment_tags, options): ...
def trans_generate(lang, modules, cr): ...
def trans_load(
    cr,
    filename,
    lang,
    verbose: bool = ...,
    module_name: Optional[Any] = ...,
    context: Optional[Any] = ...,
): ...
def trans_load_data(
    cr,
    fileobj,
    fileformat,
    lang,
    lang_name: Optional[Any] = ...,
    verbose: bool = ...,
    module_name: Optional[Any] = ...,
    context: Optional[Any] = ...,
) -> None: ...
def get_locales(lang: Optional[Any] = ...) -> None: ...
def resetlocale(): ...
def load_language(cr, lang) -> None: ...
