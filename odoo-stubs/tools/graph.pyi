from typing import Any, Optional

class graph:
    nodes: Any = ...
    edges: Any = ...
    no_ancester: Any = ...
    transitions: Any = ...
    result: Any = ...
    def __init__(
        self, nodes: Any, transitions: Any, no_ancester: Optional[Any] = ...
    ) -> None: ...
    edge_wt: Any = ...
    def init_rank(self) -> None: ...
    reachable_nodes: Any = ...
    tree_edges: Any = ...
    def tight_tree(self): ...
    def reachable_node(self, node: Any) -> None: ...
    cut_edges: Any = ...
    head_nodes: Any = ...
    def init_cutvalues(self) -> None: ...
    def head_component(self, node: Any, rest_edges: Any) -> None: ...
    def process_ranking(self, node: Any, level: int = ...) -> None: ...
    def make_acyclic(self, parent: Any, node: Any, level: Any, tree: Any): ...
    def rev_edges(self, tree: Any): ...
    def exchange(self, e: Any, f: Any) -> None: ...
    def enter_edge(self, edge: Any): ...
    def leave_edge(self): ...
    def finalize_rank(self, node: Any, level: Any) -> None: ...
    def normalize(self) -> None: ...
    def make_chain(self) -> None: ...
    def init_order(self, node: Any, level: Any) -> None: ...
    def order_heuristic(self) -> None: ...
    def wmedian(self) -> None: ...
    def median_value(self, node: Any, adj_rank: Any): ...
    def adj_position(self, node: Any, adj_rank: Any): ...
    levels: Any = ...
    def preprocess_order(self) -> None: ...
    def graph_order(self) -> None: ...
    def tree_order(self, node: Any, last: int = ...): ...
    max_order: Any = ...
    def process_order(self) -> None: ...
    partial_order: Any = ...
    def find_starts(self) -> None: ...
    critical_edges: Any = ...
    links: Any = ...
    Is_Cyclic: bool = ...
    def rank(self) -> None: ...
    order: Any = ...
    def order_in_rank(self): ...
    start_nodes: Any = ...
    tree_list: Any = ...
    start: Any = ...
    def process(self, starting_node: Any) -> None: ...
    def __str__(self): ...
    def scale(
        self,
        maxx: Any,
        maxy: Any,
        nwidth: int = ...,
        nheight: int = ...,
        margin: int = ...,
    ) -> None: ...
    def result_get(self): ...
