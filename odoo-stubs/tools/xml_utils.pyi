from lxml import etree
from lxml.etree import _Element
from typing import Callable, IO, Iterable, Literal

from ..api import Environment

class odoo_resolver(etree.Resolver):
    env: Environment
    prefix: str | None
    def __init__(self, env: Environment, prefix: str | None) -> None: ...
    def resolve(self, url: str, id: str, context) -> str: ...

def _check_with_xsd(tree_or_str: str | _Element, stream: str | IO, env: Environment | None = ..., prefix: str | None = ...) -> None: ...
def create_xml_node_chain(first_parent_node: _Element, nodes_list: Iterable[str], last_node_value: str | None = ...) -> list[_Element]: ...
def create_xml_node(parent_node: _Element, node_name: str, node_value: str | None = ...) -> _Element: ...
def cleanup_xml_node(xml_node_or_string: _Element | str, remove_blank_text: bool = ..., remove_blank_nodes: bool = ...,
                     indent_level: int = ..., indent_space: str = ...) -> _Element: ...
def load_xsd_files_from_url(env: Environment, url: str, file_name: str, force_reload: bool = ..., request_max_timeout: int = ...,
                            xsd_name_prefix: str = ..., xsd_names_filter: str | list[str] | None = ...,
                            modify_xsd_content: Callable[[bytes], bytes] | None = ...) -> 'odoo.model.ir_attachment | Literal[False]': ...
def validate_xml_from_attachment(env: Environment, xml_content, xsd_name: str, reload_files_function: Callable | None = ...,
                                 prefix: str | None = ...) -> None: ...
