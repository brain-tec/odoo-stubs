from typing import Any, Optional

__all__: Any

class LRUNode:
    prev: Any
    me: Any
    next: Any
    def __init__(self, prev, me) -> None: ...

class LRU:
    _lock: Any
    count: Any
    d: Any
    first: Any
    last: Any
    def __init__(self, count, pairs: Any = ...) -> None: ...
    def __contains__(self, obj): ...
    def get(self, obj, val: Optional[Any] = ...): ...
    def __getitem__(self, obj): ...
    def __setitem__(self, obj, val) -> None: ...
    def __delitem__(self, obj) -> None: ...
    def __iter__(self) -> Any: ...
    def __len__(self): ...
    def iteritems(self) -> None: ...
    items: Any
    def iterkeys(self): ...
    def itervalues(self): ...
    def keys(self): ...
    def pop(self, key): ...
    def clear(self) -> None: ...
