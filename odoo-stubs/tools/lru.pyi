from threading import RLock
from typing import Any, Generator, Iterator

__all__ = ["LRU"]

class LRUNode:
    __slots__ = ["prev", "next", "me"]
    prev: Any
    me: Any
    next: Any
    def __init__(self, prev, me) -> None: ...

class LRU:
    _lock: RLock
    count: int
    d: dict
    first: Any
    last: Any
    def __init__(self, count: int, pairs: tuple[Any, Any] = ...) -> None: ...
    def __contains__(self, obj) -> bool: ...
    def get(self, obj, val: Any | None = ...): ...
    def __getitem__(self, obj): ...
    def __setitem__(self, obj, val) -> None: ...
    def __delitem__(self, obj) -> None: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...
    def iteritems(self) -> Generator[Any, None, None]: ...
    items = iteritems
    def iterkeys(self): ...
    def itervalues(self): ...
    def keys(self): ...
    def pop(self, key): ...
    def clear(self) -> None: ...
