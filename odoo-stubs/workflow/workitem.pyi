from typing import Any

logger: Any

class Environment(dict):
    cr: Any
    uid: Any
    model: Any
    id: Any
    ids: Any
    def __init__(self, session, record) -> None: ...
    def __getitem__(self, key): ...

class WorkflowItem:
    session: Any
    record: Any
    workitem: Any
    def __init__(self, session, record, work_item_values) -> None: ...
    @classmethod
    def create(cls, session, record, activity, instance_id, stack) -> None: ...
    @classmethod
    def create_all(cls, session, record, activities, instance_id, stack) -> None: ...
    def process(
        self,
        signal: Any | None = ...,
        force_running: bool = ...,
        stack: Any | None = ...,
    ): ...
    def _execute(self, activity, stack): ...
    def _state_set(self, activity, state) -> None: ...
    def _split_test(self, split_mode, signal, stack): ...
    def _join_test(self, trans_id, inst_id, stack) -> None: ...
    def wkf_expr_eval_expr(self, lines): ...
    def wkf_expr_execute_action(self, activity): ...
    def wkf_expr_execute(self, activity): ...
    def wkf_expr_check(self, transition, signal): ...
