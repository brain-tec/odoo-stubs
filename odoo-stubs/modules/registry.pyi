from collections.abc import Mapping
from typing import Any, Optional

from ..sql_db import Cursor

_logger: Any
_schema: Any

class Registry(Mapping):
    _lock: Any = ...
    _saved_lock: Any = ...
    model_cache: Any = ...
    def registries(cls): ...
    def __new__(cls, db_name: Any): ...
    @classmethod
    def new(cls, db_name: Any, force_demo: bool = ..., status: Optional[Any] = ..., update_module: bool = ...): ...
    models: Any = ...
    _sql_constraints: Any = ...
    _init: bool = ...
    _assertion_report: Any = ...
    _fields_by_model: Any = ...
    _ordinary_tables: Any = ...
    _constraint_queue: Any = ...
    __cache: Any = ...
    _init_modules: Any = ...
    updated_modules: Any = ...
    loaded_xmlids: Any = ...
    db_name: Any = ...
    _db: Any = ...
    test_cr: Any = ...
    test_lock: Any = ...
    loaded: bool = ...
    ready: bool = ...
    registry_sequence: Any = ...
    cache_sequence: Any = ...
    registry_invalidated: bool = ...
    cache_invalidated: bool = ...
    has_unaccent: Any = ...
    def init(self, db_name: Any) -> None: ...
    @classmethod
    def delete(cls, db_name: Any) -> None: ...
    @classmethod
    def delete_all(cls) -> None: ...
    def __len__(self): ...
    def __iter__(self) -> Any: ...
    def __getitem__(self, model_name: Any): ...
    def __call__(self, model_name: Any): ...
    def __setitem__(self, model_name: Any, model: Any) -> None: ...
    def __delitem__(self, model_name: Any) -> None: ...
    def descendants(self, model_names: Any, *kinds: Any): ...
    def load(self, cr: Any, module: Any): ...
    _m2m: Any = ...
    def setup_models(self, cr: Any) -> None: ...
    def field_computed(self): ...
    def field_triggers(self): ...
    def post_init(self, func: Any, *args: Any, **kwargs: Any) -> None: ...
    def post_constraint(self, func: Any, *args: Any, **kwargs: Any) -> None: ...
    def finalize_constraints(self) -> None: ...
    _post_init_queue: Any = ...
    _foreign_keys: Any = ...
    _is_install: Any = ...
    def init_models(self, cr: Any, model_names: Any, context: Any, install: bool = ...) -> None: ...
    def check_indexes(self, cr: Any, model_names: Any) -> None: ...
    def add_foreign_key(self, table1: Any, column1: Any, table2: Any, column2: Any, ondelete: Any, model: Any, module: Any, force: bool = ...) -> None: ...
    def check_foreign_keys(self, cr: Any) -> None: ...
    def check_tables_exist(self, cr: Any) -> None: ...
    def _clear_cache(self) -> None: ...
    def clear_caches(self) -> None: ...
    def is_an_ordinary_table(self, model: Any): ...
    def setup_signaling(self) -> None: ...
    def check_signaling(self): ...
    def signal_changes(self) -> None: ...
    def reset_changes(self) -> None: ...
    def manage_changes(self) -> None: ...
    def in_test_mode(self): ...
    def enter_test_mode(self, cr: Any) -> None: ...
    def leave_test_mode(self) -> None: ...
    def cursor(self) -> Cursor: ...

class DummyRLock:
    def acquire(self) -> None: ...
    def release(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, type: Any, value: Any, traceback: Any) -> None: ...
