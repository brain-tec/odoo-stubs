import unittest
from types import ModuleType
from typing import Any, Literal, MutableSequence, Generator

MANIFEST_NAMES: tuple[str, ...]
README: list[str]

def ad_paths() -> MutableSequence[str]: ...

loaded: list

class AddonsHook:
    def find_module(self, name: str, path: Any | None = ...) -> AddonsHook | None: ...
    def load_module(self, name: str) -> ModuleType | None: ...

class OdooHook:
    def find_module(self, name: str, path: Any | None = ...) -> OdooHook | None: ...
    def load_module(self, name: str) -> ModuleType | None: ...

class UpgradeHook:
    def find_module(self, name: str, path: Any | None = ...) -> UpgradeHook | None: ...
    def load_module(self, name: str) -> ModuleType | None: ...

def initialize_sys_path() -> None: ...
def get_module_path(module: str, downloaded: bool = ..., display_warning: bool = ...) -> str | Literal[False]: ...
def get_module_filetree(module: str, dir: str = ...) -> dict: ...
def get_resource_path(module: str, *args) -> str | Literal[False]: ...
get_module_resource = get_resource_path

def get_resource_from_path(path: str) -> tuple[str, str, str] | None: ...
def get_module_icon(module: str) -> str: ...
def module_manifest(path: str) -> str | None: ...
def get_module_root(path: str) -> str | None: ...
def load_information_from_description_file(module: str, mod_path: str | None = ...) -> dict: ...
def load_openerp_module(module_name: str) -> None: ...
def get_modules() -> list[str]: ...
def get_modules_with_version() -> dict[str, Any]: ...
def adapt_version(version: str) -> str: ...
def get_test_modules(module: str) -> list: ...
def _get_tests_modules(path: str, module: str) -> list: ...

class OdooTestResult(unittest.result.TestResult):
    def log(self, level, msg, *args, test: Any | None = ..., exc_info: Any | None = ..., extra: Any | None = ..., stack_info: bool = ..., caller_infos: Any | None = ...) -> None: ...
    def getDescription(self, test): ...
    def startTest(self, test) -> None: ...
    def addError(self, test, err) -> None: ...
    def addFailure(self, test, err) -> None: ...
    def addSubTest(self, test, subtest, err) -> None: ...
    def addSkip(self, test, reason) -> None: ...
    def addUnexpectedSuccess(self, test) -> None: ...
    def logError(self, flavour, test, error) -> None: ...
    def getErrorCallerInfo(self, error, test): ...

class OdooTestRunner:
    def run(self, test): ...

current_test: Any

def run_unit_tests(module_name: str, position: str = ...) -> bool: ...
def unwrap_suite(test) -> Generator[Any, None, None]: ...
