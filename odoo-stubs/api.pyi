from collections import Mapping
from typing import Any, Optional
from weakref import WeakSet

from .modules.registry import Registry
from .sql_db import Cursor

__all__: Any
_logger: Any
WRAPPED_ATTRS: Any
INHERITED_ATTRS: Any

class Params:
    args: Any
    kwargs: Any
    def __init__(self, args, kwargs) -> None: ...
    def __str__(self): ...

class Meta(type):
    def __new__(meta, name, bases, attrs): ...

def attrsetter(attr, value): ...
def propagate(method1, method2): ...
def constrains(*args): ...
def onchange(*args): ...
def depends(*args): ...
def returns(model, downgrade: Optional[Any] = ..., upgrade: Optional[Any] = ...): ...
def downgrade(method, value, self, args, kwargs): ...
def aggregate(method, value, self): ...
def split_context(method, args, kwargs): ...
def model(method): ...
def multi(method): ...
def one(method): ...
def model_cr(method): ...
def model_cr_context(method): ...

_create_logger: Any

def _model_create_single(create, self, arg): ...
def model_create_single(method): ...
def _model_create_multi(create, self, arg): ...
def model_create_multi(method): ...
def cr(method): ...
def cr_context(method): ...
def cr_uid(method): ...
def cr_uid_context(method): ...
def cr_uid_id(method): ...
def cr_uid_id_context(method): ...
def cr_uid_ids(method): ...
def cr_uid_ids_context(method): ...
def cr_uid_records(method): ...
def cr_uid_records_context(method): ...
def v7(method_v7): ...
def v8(method_v8): ...
def noguess(method): ...
def guess(method): ...
def expected(decorator, func): ...
def _call_kw_model(method, self, args, kwargs): ...
def _call_kw_model_create(method, self, args, kwargs): ...
def _call_kw_multi(method, self, args, kwargs): ...
def call_kw(model, name, args, kwargs): ...

class Environment(Mapping):
    cr: Cursor
    uid: int
    context: dict
    _local: Any
    envs: Environments
    @classmethod
    def manage(cls) -> None: ...
    @classmethod
    def reset(cls) -> None: ...
    registry: Registry
    cache: Cache
    _cache_key: Any
    _protected: Any
    dirty: Any
    all: Environments
    def __new__(cls, cr: Cursor, uid, context) -> Environment: ...
    def __contains__(self, model_name) -> bool: ...
    def __getitem__(self, model_name): ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __call__(
        self,
        cr: Optional[Cursor] = ...,
        user: Optional[Any] = ...,
        context: Optional[Any] = ...,
    ) -> Environment: ...
    def ref(self, xml_id, raise_if_not_found: bool = ...): ...
    @property
    def user(self):
        return self["res.users"]
    @property
    def lang(self) -> str: ...
    def _do_in_mode(self, mode) -> None: ...
    def do_in_draft(self): ...
    @property
    def in_draft(self): ...
    def do_in_onchange(self): ...
    @property
    def in_onchange(self): ...
    def clear(self) -> None: ...
    def clear_upon_failure(self) -> None: ...
    def protected(self, field): ...
    def protecting(self, what, records: Optional[Any] = ...) -> None: ...
    def field_todo(self, field): ...
    def check_todo(self, field, record): ...
    def add_todo(self, field, records) -> None: ...
    def remove_todo(self, field, records) -> None: ...
    def has_todo(self): ...
    def get_todo(self): ...
    @property
    def recompute(self): ...
    def norecompute(self) -> None: ...
    def cache_key(self, field): ...

class Environments:
    envs: WeakSet
    cache: Cache
    todo: Any
    mode: bool
    recompute: bool
    def __init__(self) -> None: ...
    def add(self, env) -> None: ...
    def __iter__(self) -> Any: ...

class Cache:
    _data: Any
    def __init__(self): ...
    def contains(self, record, field): ...
    def get(self, record, field): ...
    def set(self, record, field, value) -> None: ...
    def update(self, records, field, values) -> None: ...
    def remove(self, record, field) -> None: ...
    def contains_value(self, record, field): ...
    def get_value(self, record, field, default: Optional[Any] = ...): ...
    def get_special(self, record, field, default: Optional[Any] = ...): ...
    def set_special(self, record, field, getter) -> None: ...
    def set_failed(self, records, fields, exception) -> None: ...
    def get_fields(self, record) -> None: ...
    def get_records(self, model, field): ...
    def get_missing_ids(self, records, field) -> None: ...
    def copy(self, records, env) -> None: ...
    def invalidate(self, spec: Optional[Any] = ...) -> None: ...
    def check(self, env) -> None: ...

class SpecialValue:
    get: Any
    def __init__(self, getter) -> None: ...
